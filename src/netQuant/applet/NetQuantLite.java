//NetQuant is a graph viewer which allows interactive editing of networks
//(edges and nodes) and connects to databases and provides quantitative analysis.
//NetQuant is based on Medusa developed by Sean Hopper <http://www.bork.embl.de/medusa>
//
//Copyright (C) 2011 Diego Calzolari
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of 
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
//Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.

package netQuant.applet;

//import TimeNet.Stringlet;
import java.awt.BorderLayout;
import java.awt.Graphics;
import javax.swing.JApplet;
import java.awt.event.ItemListener;
import java.awt.event.ActionListener;
import java.awt.Color;
import javax.swing.JScrollPane;
import javax.swing.JPanel;
import javax.swing.JCheckBox;
import javax.swing.JButton;

import netQuant.*;
import netQuant.dataio.DataLoader;
import netQuant.display.BasicGraphPanel;
import netQuant.graph.Graph;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.Container;



/**
 * <code>NetQuantLite</code> is an applet version of NetQuant.
 * The parameters required are very strict, since the applet will probably be used
 * as a complement to a webserver and the data will be generated by scripts.
 *
 *
 * <code>
 * <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
 * <html>
 * <head>
 *  <title>Network</title>
 * </head>
 * <body>
 * <h1>Lightweight network viewer</h1>
 * <hr> <applet code="netQuant.applet.NetQuantLite.class"
 * archive="netquant.jar" height="600" width="600">
 * <param name="settings" value="0,0,0;100,255,100">
 *
 * <param name="edges" value=
 * "nodeA:node2:2:1:1.0;node1:node3:2:1:0.0;node1:node2:1:1:-1.0;">
 *
 * <param name="nodes" value="nodeA:0.5:0.5:34,34,34:1;node2:0.8:0.4:234,234,34:2;">
 *
 * <param name="X" value="500"><param
 * name="Y" value="500"> </applet> <br>
 * </body>
 * </html></code>
 * @author <a href="mailto:hooper@minie.EMBL-Heidelberg.DE">Sean Hooper</a>
 * @version 1.0
 */
public class NetQuantLite extends JApplet
        implements ItemListener, ActionListener{
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1607213005054891359L;
	final Color babyBlue=new Color(230,226,230);
    public BasicGraphPanel panel;
    private NetQuantSettings stringSettings;
    //InfoPanel infoPanel;
    private JScrollPane jScrollPane;
    //Image image;
    public JPanel controlPanel = new JPanel();
    private int xParam;
    private int yParam;
    JCheckBox relax=new JCheckBox("Relax",false);
    JCheckBox pretty=new JCheckBox("Edge colours",true);
    JCheckBox names = new JCheckBox("Labels", true);
    JButton frButton = new JButton("Layout");
    JButton imageButton = new JButton("Export");
    
    public void initPanel(){
        System.out.println("Initializing MedusaAppletPanel");
        String settingsParam=getParameter("settings");
        
        setLocalStringSettings(new NetQuantSettings(settingsParam));
        
        String linkStart=getParameter("linkStart");
        String linkEnd=getParameter("linkEnd");
        System.out.println(linkStart);
        NetQuantAppletPanel panel=new NetQuantAppletPanel(getLocalStringSettings(), this, linkStart, linkEnd);
        
        setPanel(new NetQuantAppletPanel(getLocalStringSettings(), this, linkStart, linkEnd));
        getPanel().stop();
    }
    
    
    public void init(){
        
        initPanel();
        Container content = getContentPane();
        content.setLayout(new BorderLayout());
       
        
        String edges = getParameter("edges");
        
        String nodes = getParameter("nodes");
        
        DataLoader dl = new DataLoader();
        Graph g =dl.readParameters(edges,nodes);
        
        System.out.println(g.report());
        
        System.out.println("panel is ");
        if (getPanel()==null)
            System.out.println("null");
        else
            System.out.println("not null");
        
        getPanel().setGraph(g);
        System.out.println("graph loaded");
        
        setPrefs();
        setXParam(getParameter("X")==null ? 400:Integer.parseInt(getParameter("X")));
        setYParam(getParameter("Y")==null ? 400:Integer.parseInt(getParameter("Y")));
        
        
        getPanel().setSize(getXParam(), getYParam());
        getPanel().setTimeFrameXY(getPanel().getWidth(),getPanel().getHeight());
        setJScrollPane(new JScrollPane(getPanel()));
        content.add("Center", getJScrollPane());
        
        
        
        controlPanel=new JPanel();
        populateControlPanel();
        
        content.add("South",controlPanel);
        System.out.println("Setting visible");
        //pack();
        //setSize(xParam,yParam+controlPanel.getHeight());
        
        setVisible(true);
        //panel.validate();
        
        getJScrollPane().validate();
        
        String layoutParam=getParameter("layout");
        if (layoutParam!=null){
            if (layoutParam.compareTo("true")==0){
                getPanel().energy();
            }
        }
        
    }
    
    public void setPrefs(){
        //netPanel.setImage(image);
        getPanel().setPretty(true);
        getPanel().setArrows(false);
        getPanel().setLabel(true);
        getPanel().setConfidence(true);
        getPanel().setCool(true);
        getPanel().repaint();
        
    }
    
    public void populateControlPanel(){
        controlPanel.setLayout(new FlowLayout());
        controlPanel.setBackground(babyBlue);
        relax.setBackground(babyBlue);
        pretty.setBackground(babyBlue);
        names.setBackground(babyBlue);
        frButton.setBackground(babyBlue);
        controlPanel.add(relax); relax.addItemListener(this);
        controlPanel.add(pretty); pretty.addItemListener(this);
        controlPanel.add(names); names.addItemListener(this);
        controlPanel.add(frButton); frButton.addActionListener(this);
    }
    
    
    public void destroy() {
        //netPanel.stop();
        remove(panel);
        
    }
    
    public void start() {
        
      // panel.start();
    }
    
    public void stop() {
        panel.stop();
    }
    
    public String getAppletInfo(){
        return "Title: NetQuantLite \nAuthor: Diego Calzolari";
    }
    
        /*
         * Handle the button
         */
    public void actionPerformed(ActionEvent e) {
        Object es=e.getSource();
        if (es==frButton){
            //panel.startCool();
            relax.setSelected(false);
            getPanel().energy();
        }
        //if (es == imageButton){
        
    }
    
    /*
     * Handle item state changes
     */
    public void itemStateChanged(ItemEvent e){
        Object src = e.getSource();
        if (src==relax){
            if (relax.isSelected()){
                getPanel().start();
                //panel.energy();
            } else
                getPanel().stop();
        }
        if (src == pretty){
            getPanel().setPretty(pretty.isSelected());
            getPanel().repaint();
        }
        if (src == names){
            getPanel().setLabel(names.isSelected());
            getPanel().repaint();
        }
    }

    /**
     * 
     * Paints the container. This forwards the paint to any lightweight
     * components that are children of this container. If this method is
     * reimplemented, super.paint(g) should be called so that lightweight
     * components are properly rendered. If a child component is entirely
     * clipped by the current clipping setting in g, paint() will not be
     * forwarded to that child.
     * 
     * @param g the specified Graphics window
     * @see Component#update(Graphics)
     */
    public void paint(Graphics g) {
        super.paint(g);
    }

    public void setLocalStringSettings(NetQuantSettings stringSettings) {
        this.stringSettings = stringSettings;
    }

    public void setPanel(BasicGraphPanel panel) {
        this.panel = panel;
    }

    public BasicGraphPanel getPanel() {
        return panel;
    }

    public int getXParam() {
        return xParam;
    }

    public void setXParam(int xParam) {
        this.xParam = xParam;
    }

    public int getYParam() {
        return yParam;
    }

    public void setYParam(int yParam) {
        this.yParam = yParam;
    }

    public NetQuantSettings getLocalStringSettings() {
        return stringSettings;
    }

    public JScrollPane getJScrollPane() {
        return jScrollPane;
    }

    public void setJScrollPane(JScrollPane jScrollPane) {
        this.jScrollPane = jScrollPane;
    }
    
    
}

